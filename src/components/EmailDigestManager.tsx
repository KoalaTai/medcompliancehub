import { useState } from 'react'
import { useKV } from '@github/spark/hooks'
import { 
  Mail, 
  Calendar, 
  Clock,
  Settings,
  Users,
  Send,
  Eye,
  Download,
  CheckCircle,
  Warning,
  Filter,
  Plus,
  Trash2,
  Edit3,
  Bell
} from '@phosphor-icons/react'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { ScrollArea } from '@/components/ui/scroll-area'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { Separator } from '@/components/ui/separator'
import { Switch } from '@/components/ui/switch'
import { Textarea } from '@/components/ui/textarea'
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog'
import { toast } from 'sonner'
import { DigestNotifications } from '@/components/DigestNotifications'

interface EmailSubscription {
  id: string
  email: string
  name: string
  frequency: 'weekly' | 'biweekly' | 'monthly'
  dayOfWeek: number // 0 = Sunday, 1 = Monday, etc.
  enabled: boolean
  severityFilters: string[]
  typeFilters: string[]
  regulatoryAuthorities: string[]
  lastSent?: string
  createdAt: string
}

interface DigestTemplate {
  id: string
  name: string
  subject: string
  headerText: string
  includeExecutiveSummary: boolean
  includeCriticalAlerts: boolean
  includeUpcomingDeadlines: boolean
  includeNewGuidance: boolean
  includeImpactAnalysis: boolean
  footerText: string
  customSections: string[]
}

interface GeneratedDigest {
  id: string
  templateId: string
  generatedAt: string
  weekOf: string
  totalUpdates: number
  criticalUpdates: number
  recipientCount: number
  deliveryStatus: 'pending' | 'sent' | 'failed'
  preview?: string
}

const sampleSubscriptions: EmailSubscription[] = [
  {
    id: '1',
    email: 'compliance@medtech.com',
    name: 'Sarah Johnson (Quality Director)',
    frequency: 'weekly',
    dayOfWeek: 1, // Monday
    enabled: true,
    severityFilters: ['critical', 'high'],
    typeFilters: ['new_rule', 'amendment', 'guidance'],
    regulatoryAuthorities: ['FDA', 'ISO'],
    lastSent: '2024-01-15T09:00:00Z',
    createdAt: '2024-01-01T00:00:00Z'
  },
  {
    id: '2', 
    email: 'regulatory@pharma.co',
    name: 'Michael Chen (Regulatory Manager)',
    frequency: 'weekly',
    dayOfWeek: 2, // Tuesday
    enabled: true,
    severityFilters: ['critical', 'high', 'medium'],
    typeFilters: ['new_rule', 'amendment', 'guidance', 'deadline'],
    regulatoryAuthorities: ['FDA', 'European Commission', 'Health Canada'],
    lastSent: '2024-01-16T10:30:00Z',
    createdAt: '2024-01-05T00:00:00Z'
  }
]

const sampleTemplate: DigestTemplate = {
  id: '1',
  name: 'Weekly Compliance Update',
  subject: 'Weekly Regulatory Intelligence Digest - Week of {{week_date}}',
  headerText: 'Your weekly summary of regulatory changes affecting medical device and pharmaceutical compliance.',
  includeExecutiveSummary: true,
  includeCriticalAlerts: true,
  includeUpcomingDeadlines: true,
  includeNewGuidance: true,
  includeImpactAnalysis: true,
  footerText: 'This digest was generated by VirtualBackroom Compliance Intelligence. Contact your administrator for questions.',
  customSections: []
}

const sampleDigests: GeneratedDigest[] = [
  {
    id: '1',
    templateId: '1',
    generatedAt: '2024-01-15T09:00:00Z',
    weekOf: '2024-01-15',
    totalUpdates: 12,
    criticalUpdates: 3,
    recipientCount: 47,
    deliveryStatus: 'sent'
  },
  {
    id: '2',
    templateId: '1', 
    generatedAt: '2024-01-08T09:00:00Z',
    weekOf: '2024-01-08',
    totalUpdates: 8,
    criticalUpdates: 1,
    recipientCount: 45,
    deliveryStatus: 'sent'
  }
]

export function EmailDigestManager() {
  const [subscriptions, setSubscriptions] = useKV<EmailSubscription[]>('email-subscriptions', sampleSubscriptions)
  const [templates, setTemplates] = useKV<DigestTemplate[]>('digest-templates', [sampleTemplate])
  const [generatedDigests, setGeneratedDigests] = useKV<GeneratedDigest[]>('generated-digests', sampleDigests)
  const [activeTab, setActiveTab] = useState('overview')
  const [showAddSubscription, setShowAddSubscription] = useState(false)
  const [showEditTemplate, setShowEditTemplate] = useState(false)
  const [isGenerating, setIsGenerating] = useState(false)

  const handleGenerateDigest = async () => {
    setIsGenerating(true)
    
    try {
      // Simulate digest generation with AI
      const prompt = spark.llmPrompt`Generate a weekly regulatory intelligence digest summary based on recent updates. Include:
      - Executive summary of key regulatory changes
      - Critical alerts requiring immediate attention
      - Upcoming compliance deadlines
      - New guidance documents released
      - Impact analysis for medical device manufacturers
      
      Format as professional email content with clear sections and actionable insights.`
      
      const digestContent = await spark.llm(prompt)
      
      // Create new digest record
      const newDigest: GeneratedDigest = {
        id: Date.now().toString(),
        templateId: templates[0]?.id || '1',
        generatedAt: new Date().toISOString(),
        weekOf: new Date().toISOString().split('T')[0],
        totalUpdates: Math.floor(Math.random() * 15) + 5,
        criticalUpdates: Math.floor(Math.random() * 5) + 1,
        recipientCount: subscriptions.filter(s => s.enabled).length,
        deliveryStatus: 'pending',
        preview: digestContent.substring(0, 200) + '...'
      }
      
      setGeneratedDigests(current => [newDigest, ...current])
      
      // Add notification
      addDigestNotification({
        type: 'success',
        title: 'Weekly digest generated successfully',
        message: `Weekly regulatory digest generated with ${newDigest.totalUpdates} updates (${newDigest.criticalUpdates} critical)`,
        metadata: {
          digestId: newDigest.id,
          recipientCount: newDigest.recipientCount
        }
      })
      
      toast.success('Weekly digest generated successfully!')
    } catch (error) {
      // Add error notification
      addDigestNotification({
        type: 'error',
        title: 'Digest generation failed',
        message: 'Failed to generate weekly digest. Please try again or contact support.',
        metadata: {
          errorDetails: error instanceof Error ? error.message : 'Unknown error occurred'
        }
      })
      toast.error('Failed to generate digest. Please try again.')
    } finally {
      setIsGenerating(false)
    }
  }

  const handleSendDigest = (digestId: string) => {
    const digest = generatedDigests.find(d => d.id === digestId)
    if (!digest) return

    setGeneratedDigests(current => 
      current.map(d => 
        d.id === digestId 
          ? { ...d, deliveryStatus: 'sent' as const }
          : d
      )
    )
    
    // Add success notification
    addDigestNotification({
      type: 'success',
      title: 'Digest sent successfully',
      message: `Weekly regulatory digest delivered to ${digest.recipientCount} subscribers`,
      metadata: {
        digestId: digest.id,
        recipientCount: digest.recipientCount
      }
    })
    
    toast.success('Digest sent to all subscribers!')
  }

  // Helper function to add notifications
  const addDigestNotification = (notification: Omit<any, 'id' | 'timestamp' | 'read'>) => {
    const newNotification = {
      ...notification,
      id: Date.now().toString(),
      timestamp: new Date().toISOString(),
      read: false
    }
    
    // This would update the notifications in the DigestNotifications component
    // For now, we'll just show it in the console for demo purposes
    console.log('New notification:', newNotification)
  }

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('en-US', {
      month: 'short',
      day: 'numeric',
      year: 'numeric'
    })
  }

  const getDayName = (dayNumber: number) => {
    const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']
    return days[dayNumber]
  }

  const activeSubscriptions = subscriptions.filter(s => s.enabled).length
  const totalDigestsSent = generatedDigests.filter(d => d.deliveryStatus === 'sent').length
  const averageUpdatesPerWeek = generatedDigests.length > 0 
    ? Math.round(generatedDigests.reduce((sum, d) => sum + d.totalUpdates, 0) / generatedDigests.length)
    : 0

  return (
    <div className="p-6 space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-3xl font-bold">Email Digest Manager</h2>
          <p className="text-muted-foreground">Automated weekly regulatory update summaries</p>
        </div>
        <div className="flex items-center gap-2">
          <Button 
            variant="outline" 
            size="sm"
            onClick={handleGenerateDigest}
            disabled={isGenerating}
          >
            {isGenerating ? (
              <Clock className="h-4 w-4 mr-2 animate-spin" />
            ) : (
              <Send className="h-4 w-4 mr-2" />
            )}
            Generate This Week
          </Button>
          <Button size="sm" onClick={() => setShowAddSubscription(true)}>
            <Plus className="h-4 w-4 mr-2" />
            Add Subscription
          </Button>
        </div>
      </div>

      {/* Overview Cards */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium flex items-center gap-2">
              <Users className="h-4 w-4 text-blue-500" />
              Active Subscribers
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{activeSubscriptions}</div>
            <p className="text-xs text-muted-foreground">Receiving weekly updates</p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium flex items-center gap-2">
              <Mail className="h-4 w-4 text-green-500" />
              Digests Sent
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{totalDigestsSent}</div>
            <p className="text-xs text-muted-foreground">Total delivered</p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium flex items-center gap-2">
              <Calendar className="h-4 w-4 text-purple-500" />
              Avg Updates/Week
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{averageUpdatesPerWeek}</div>
            <p className="text-xs text-muted-foreground">Regulatory changes</p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium flex items-center gap-2">
              <Warning className="h-4 w-4 text-orange-500" />
              Critical Alerts
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">
              {generatedDigests[0]?.criticalUpdates || 0}
            </div>
            <p className="text-xs text-muted-foreground">This week</p>
          </CardContent>
        </Card>
      </div>

      <Tabs value={activeTab} onValueChange={setActiveTab}>
        <TabsList>
          <TabsTrigger value="overview">Recent Digests</TabsTrigger>
          <TabsTrigger value="subscribers">Subscribers</TabsTrigger>
          <TabsTrigger value="templates">Templates</TabsTrigger>
          <TabsTrigger value="notifications">Notifications</TabsTrigger>
          <TabsTrigger value="settings">Settings</TabsTrigger>
        </TabsList>

        <TabsContent value="overview" className="space-y-4">
          <div className="flex items-center justify-between">
            <h3 className="text-lg font-semibold">Generated Digests</h3>
            <Button variant="outline" size="sm">
              <Download className="h-4 w-4 mr-2" />
              Export Report
            </Button>
          </div>
          
          <ScrollArea className="h-[500px]">
            <div className="space-y-4">
              {generatedDigests.map((digest) => (
                <Card key={digest.id}>
                  <CardHeader className="pb-3">
                    <div className="flex items-center justify-between">
                      <div>
                        <CardTitle className="text-lg">Week of {formatDate(digest.weekOf)}</CardTitle>
                        <CardDescription>
                          Generated {formatDate(digest.generatedAt)}
                        </CardDescription>
                      </div>
                      <div className="flex items-center gap-2">
                        <Badge 
                          className={
                            digest.deliveryStatus === 'sent' ? 'bg-green-100 text-green-800' :
                            digest.deliveryStatus === 'failed' ? 'bg-red-100 text-red-800' :
                            'bg-yellow-100 text-yellow-800'
                          }
                        >
                          {digest.deliveryStatus === 'sent' && <CheckCircle className="h-3 w-3 mr-1" />}
                          {digest.deliveryStatus.charAt(0).toUpperCase() + digest.deliveryStatus.slice(1)}
                        </Badge>
                      </div>
                    </div>
                  </CardHeader>
                  
                  <CardContent>
                    <div className="grid grid-cols-3 gap-4 mb-4">
                      <div className="text-center">
                        <div className="text-2xl font-bold text-blue-600">{digest.totalUpdates}</div>
                        <div className="text-xs text-muted-foreground">Total Updates</div>
                      </div>
                      <div className="text-center">
                        <div className="text-2xl font-bold text-red-600">{digest.criticalUpdates}</div>
                        <div className="text-xs text-muted-foreground">Critical</div>
                      </div>
                      <div className="text-center">
                        <div className="text-2xl font-bold text-green-600">{digest.recipientCount}</div>
                        <div className="text-xs text-muted-foreground">Recipients</div>
                      </div>
                    </div>
                    
                    {digest.preview && (
                      <div className="bg-muted/50 p-3 rounded-md mb-3">
                        <p className="text-sm text-muted-foreground">{digest.preview}</p>
                      </div>
                    )}
                    
                    <div className="flex items-center gap-2">
                      <Button variant="ghost" size="sm">
                        <Eye className="h-4 w-4 mr-2" />
                        Preview
                      </Button>
                      {digest.deliveryStatus === 'pending' && (
                        <Button 
                          size="sm" 
                          onClick={() => handleSendDigest(digest.id)}
                        >
                          <Send className="h-4 w-4 mr-2" />
                          Send Now
                        </Button>
                      )}
                      <Button variant="ghost" size="sm">
                        <Download className="h-4 w-4 mr-2" />
                        Download
                      </Button>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </ScrollArea>
        </TabsContent>

        <TabsContent value="subscribers" className="space-y-4">
          <div className="flex items-center justify-between">
            <h3 className="text-lg font-semibold">Email Subscribers</h3>
            <Button size="sm" onClick={() => setShowAddSubscription(true)}>
              <Plus className="h-4 w-4 mr-2" />
              Add Subscriber
            </Button>
          </div>
          
          <ScrollArea className="h-[500px]">
            <div className="space-y-4">
              {subscriptions.map((subscription) => (
                <Card key={subscription.id}>
                  <CardHeader className="pb-3">
                    <div className="flex items-center justify-between">
                      <div>
                        <CardTitle className="text-lg">{subscription.name}</CardTitle>
                        <CardDescription>{subscription.email}</CardDescription>
                      </div>
                      <div className="flex items-center gap-2">
                        <Switch 
                          checked={subscription.enabled}
                          onCheckedChange={(enabled) => {
                            setSubscriptions(current => 
                              current.map(s => 
                                s.id === subscription.id ? { ...s, enabled } : s
                              )
                            )
                          }}
                        />
                        <Button variant="ghost" size="sm">
                          <Edit3 className="h-4 w-4" />
                        </Button>
                        <Button variant="ghost" size="sm">
                          <Trash2 className="h-4 w-4 text-red-500" />
                        </Button>
                      </div>
                    </div>
                  </CardHeader>
                  
                  <CardContent>
                    <div className="grid grid-cols-2 gap-4 mb-3">
                      <div>
                        <Label className="text-xs text-muted-foreground">Frequency</Label>
                        <p className="text-sm font-medium capitalize">{subscription.frequency}</p>
                      </div>
                      <div>
                        <Label className="text-xs text-muted-foreground">Delivery Day</Label>
                        <p className="text-sm font-medium">{getDayName(subscription.dayOfWeek)}</p>
                      </div>
                    </div>
                    
                    <div className="space-y-2">
                      <div>
                        <Label className="text-xs text-muted-foreground">Severity Filters</Label>
                        <div className="flex flex-wrap gap-1 mt-1">
                          {subscription.severityFilters.map((filter) => (
                            <Badge key={filter} variant="outline" className="text-xs">
                              {filter}
                            </Badge>
                          ))}
                        </div>
                      </div>
                      
                      <div>
                        <Label className="text-xs text-muted-foreground">Authorities</Label>
                        <div className="flex flex-wrap gap-1 mt-1">
                          {subscription.regulatoryAuthorities.map((authority) => (
                            <Badge key={authority} variant="outline" className="text-xs">
                              {authority}
                            </Badge>
                          ))}
                        </div>
                      </div>
                    </div>
                    
                    {subscription.lastSent && (
                      <div className="mt-3 pt-3 border-t text-xs text-muted-foreground">
                        Last sent: {formatDate(subscription.lastSent)}
                      </div>
                    )}
                  </CardContent>
                </Card>
              ))}
            </div>
          </ScrollArea>
        </TabsContent>

        <TabsContent value="templates" className="space-y-4">
          <div className="flex items-center justify-between">
            <h3 className="text-lg font-semibold">Digest Templates</h3>
            <Button size="sm" onClick={() => setShowEditTemplate(true)}>
              <Settings className="h-4 w-4 mr-2" />
              Edit Template
            </Button>
          </div>
          
          {templates.map((template) => (
            <Card key={template.id}>
              <CardHeader>
                <CardTitle>{template.name}</CardTitle>
                <CardDescription>Template configuration and content sections</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div>
                  <Label className="text-sm font-medium">Subject Line</Label>
                  <p className="text-sm text-muted-foreground mt-1">{template.subject}</p>
                </div>
                
                <div>
                  <Label className="text-sm font-medium">Included Sections</Label>
                  <div className="grid grid-cols-2 gap-2 mt-2">
                    <div className="flex items-center gap-2">
                      <CheckCircle className={`h-4 w-4 ${template.includeExecutiveSummary ? 'text-green-500' : 'text-gray-300'}`} />
                      <span className="text-sm">Executive Summary</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <CheckCircle className={`h-4 w-4 ${template.includeCriticalAlerts ? 'text-green-500' : 'text-gray-300'}`} />
                      <span className="text-sm">Critical Alerts</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <CheckCircle className={`h-4 w-4 ${template.includeUpcomingDeadlines ? 'text-green-500' : 'text-gray-300'}`} />
                      <span className="text-sm">Upcoming Deadlines</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <CheckCircle className={`h-4 w-4 ${template.includeNewGuidance ? 'text-green-500' : 'text-gray-300'}`} />
                      <span className="text-sm">New Guidance</span>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          ))}
        </TabsContent>

        <TabsContent value="notifications">
          <DigestNotifications />
        </TabsContent>

        <TabsContent value="settings" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>Automated Digest Generation</CardTitle>
              <CardDescription>Configure automatic digest creation and delivery schedules</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="flex items-center justify-between">
                <div>
                  <Label className="text-sm font-medium">Auto-generate weekly digests</Label>
                  <p className="text-xs text-muted-foreground">Automatically create digests every Monday at 9 AM EST</p>
                </div>
                <Switch defaultChecked />
              </div>
              
              <div className="flex items-center justify-between">
                <div>
                  <Label className="text-sm font-medium">Send immediately after generation</Label>
                  <p className="text-xs text-muted-foreground">Skip manual approval for routine digests</p>
                </div>
                <Switch />
              </div>
              
              <div className="flex items-center justify-between">
                <div>
                  <Label className="text-sm font-medium">Include AI-generated summaries</Label>
                  <p className="text-xs text-muted-foreground">Use AI to create executive summaries and impact analysis</p>
                </div>
                <Switch defaultChecked />
              </div>
              
              <div className="flex items-center justify-between">
                <div>
                  <Label className="text-sm font-medium">Smart scheduling optimization</Label>
                  <p className="text-xs text-muted-foreground">Automatically adjust delivery times based on engagement metrics</p>
                </div>
                <Switch />
              </div>
              
              <Separator className="my-4" />
              
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="generation-time">Default generation time</Label>
                  <Input id="generation-time" type="time" defaultValue="09:00" />
                </div>
                <div>
                  <Label htmlFor="timezone">Timezone</Label>
                  <Select defaultValue="America/New_York">
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="America/New_York">Eastern Time</SelectItem>
                      <SelectItem value="America/Chicago">Central Time</SelectItem>
                      <SelectItem value="America/Denver">Mountain Time</SelectItem>
                      <SelectItem value="America/Los_Angeles">Pacific Time</SelectItem>
                      <SelectItem value="UTC">UTC</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>
            </CardContent>
          </Card>
          
          <Card>
            <CardHeader>
              <CardTitle>Weekly Delivery Schedules</CardTitle>
              <CardDescription>Set up recurring delivery schedules for different subscriber groups</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-7 gap-2 text-center text-sm">
                <div className="font-medium">Sun</div>
                <div className="font-medium">Mon</div>
                <div className="font-medium">Tue</div>
                <div className="font-medium">Wed</div>
                <div className="font-medium">Thu</div>
                <div className="font-medium">Fri</div>
                <div className="font-medium">Sat</div>
                
                <div className="p-2 border rounded bg-muted/30">
                  <div className="text-xs text-muted-foreground">No schedule</div>
                </div>
                <div className="p-2 border rounded bg-blue-50 border-blue-200">
                  <div className="text-xs font-medium text-blue-700">Executive</div>
                  <div className="text-xs text-blue-600">9:00 AM</div>
                </div>
                <div className="p-2 border rounded bg-green-50 border-green-200">
                  <div className="text-xs font-medium text-green-700">Full Team</div>
                  <div className="text-xs text-green-600">10:30 AM</div>
                </div>
                <div className="p-2 border rounded bg-muted/30">
                  <div className="text-xs text-muted-foreground">No schedule</div>
                </div>
                <div className="p-2 border rounded bg-muted/30">
                  <div className="text-xs text-muted-foreground">No schedule</div>
                </div>
                <div className="p-2 border rounded bg-purple-50 border-purple-200">
                  <div className="text-xs font-medium text-purple-700">Monthly</div>
                  <div className="text-xs text-purple-600">2:00 PM</div>
                </div>
                <div className="p-2 border rounded bg-muted/30">
                  <div className="text-xs text-muted-foreground">No schedule</div>
                </div>
              </div>
              
              <div className="text-center pt-2">
                <Button variant="outline" size="sm">
                  <Calendar className="h-4 w-4 mr-2" />
                  Manage Schedules
                </Button>
              </div>
            </CardContent>
          </Card>
          
          <Card>
            <CardHeader>
              <CardTitle>Quality & Safety Controls</CardTitle>
              <CardDescription>Automated checks and safeguards for digest delivery</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="flex items-center justify-between">
                <div>
                  <Label className="text-sm font-medium">Content validation</Label>
                  <p className="text-xs text-muted-foreground">Verify digest content before sending</p>
                </div>
                <Switch defaultChecked />
              </div>
              
              <div className="flex items-center justify-between">
                <div>
                  <Label className="text-sm font-medium">Duplicate detection</Label>
                  <p className="text-xs text-muted-foreground">Prevent sending duplicate content to subscribers</p>
                </div>
                <Switch defaultChecked />
              </div>
              
              <div className="flex items-center justify-between">
                <div>
                  <Label className="text-sm font-medium">Delivery confirmation</Label>
                  <p className="text-xs text-muted-foreground">Require delivery confirmation for critical updates</p>
                </div>
                <Switch />
              </div>
              
              <Separator className="my-4" />
              
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="max-recipients">Max recipients per digest</Label>
                  <Input id="max-recipients" type="number" defaultValue="500" />
                </div>
                <div>
                  <Label htmlFor="retry-attempts">Delivery retry attempts</Label>
                  <Input id="retry-attempts" type="number" defaultValue="3" />
                </div>
              </div>
            </CardContent>
          </Card>
          
          <Card>
            <CardHeader>
              <CardTitle>Notification Preferences</CardTitle>
              <CardDescription>Control when you receive notifications about digest activities</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="flex items-center justify-between">
                <div>
                  <Label className="text-sm font-medium">Successful deliveries</Label>
                  <p className="text-xs text-muted-foreground">Daily summary of successful digest deliveries</p>
                </div>
                <Switch defaultChecked />
              </div>
              
              <div className="flex items-center justify-between">
                <div>
                  <Label className="text-sm font-medium">Digest generation failures</Label>
                  <p className="text-xs text-muted-foreground">Immediate notification when automatic generation fails</p>
                </div>
                <Switch defaultChecked />
              </div>
              
              <div className="flex items-center justify-between">
                <div>
                  <Label className="text-sm font-medium">High subscriber growth</Label>
                  <p className="text-xs text-muted-foreground">Alert when subscriber count increases by &gt;20%</p>
                </div>
                <Switch defaultChecked />
              </div>
              
              <div className="flex items-center justify-between">
                <div>
                  <Label className="text-sm font-medium">Critical regulatory alerts</Label>
                  <p className="text-xs text-muted-foreground">Immediate notification of high-priority regulatory changes</p>
                </div>
                <Switch defaultChecked />
              </div>
              
              <div className="flex items-center justify-between">
                <div>
                  <Label className="text-sm font-medium">Weekly performance reports</Label>
                  <p className="text-xs text-muted-foreground">Weekly summary of digest engagement and metrics</p>
                </div>
                <Switch />
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>

      {/* Add Subscription Dialog */}
      <Dialog open={showAddSubscription} onOpenChange={setShowAddSubscription}>
        <DialogContent className="sm:max-w-md">
          <DialogHeader>
            <DialogTitle>Add Email Subscription</DialogTitle>
            <DialogDescription>
              Add a new subscriber to receive weekly regulatory digests
            </DialogDescription>
          </DialogHeader>
          <div className="space-y-4">
            <div>
              <Label htmlFor="email">Email Address</Label>
              <Input id="email" placeholder="email@company.com" />
            </div>
            <div>
              <Label htmlFor="name">Subscriber Name</Label>
              <Input id="name" placeholder="Full Name (Title)" />
            </div>
            <div>
              <Label>Delivery Frequency</Label>
              <Select defaultValue="weekly">
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="weekly">Weekly</SelectItem>
                  <SelectItem value="biweekly">Bi-weekly</SelectItem>
                  <SelectItem value="monthly">Monthly</SelectItem>
                </SelectContent>
              </Select>
            </div>
            <div className="flex justify-end gap-2">
              <Button variant="outline" onClick={() => setShowAddSubscription(false)}>
                Cancel
              </Button>
              <Button onClick={() => {
                toast.success('Subscription added successfully!')
                setShowAddSubscription(false)
              }}>
                Add Subscriber
              </Button>
            </div>
          </div>
        </DialogContent>
      </Dialog>
    </div>
  )
}